plugins {
    id "org.sonarqube" version '2.6.1'
    id "io.codearte.nexus-staging" version "0.11.0"
    id "org.xbib.gradle.plugin.asciidoctor" version "1.5.6.0.1"
}

printf "Host: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGradle: %s Groovy: %s Java: %s\n" +
        "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
        InetAddress.getLocalHost(),
        System.getProperty("os.name"),
        System.getProperty("os.arch"),
        System.getProperty("os.version"),
        System.getProperty("java.version"),
        System.getProperty("java.vm.version"),
        System.getProperty("java.vm.vendor"),
        System.getProperty("java.vm.name"),
        gradle.gradleVersion,
        GroovySystem.getVersion(),
        JavaVersion.current()

apply plugin: 'java'
apply plugin: 'org.xbib.gradle.plugin.asciidoctor'

configurations {
    asciidoclet
}

dependencies {
    asciidoclet "org.asciidoctor:asciidoclet:${project.property('asciidoclet.version')}"
}

asciidoctor {
    backends 'html5'
    outputDir = file("${rootProject.projectDir}/docs")
    separateOutputDirs = false
    attributes 'source-highlighter': 'coderay',
            toc: '',
            idprefix: '',
            idseparator: '-',
            stylesheet: "${projectDir}/src/docs/asciidoc/css/foundation.css"
}

javadoc {
    options.docletpath = configurations.asciidoclet.files.asType(List)
    options.doclet = 'org.asciidoctor.Asciidoclet'
    options.overview = "${rootProject.projectDir}/src/docs/asciidoclet/overview.adoc"
    options.addStringOption "-base-dir", "${projectDir}"
    options.addStringOption "-attribute",
            "name=${project.name},version=${project.version},title-link=https://github.com/xbib/${project.name}"
    options.destinationDirectory(file("${projectDir}/docs/javadoc"))
    configure(options) {
        noTimestamp = true
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }

    configurations {
        wagon
    }

    dependencies {
        testCompile "junit:junit:${project.property('junit.version')}"
        wagon "org.apache.maven.wagon:wagon-ssh:${project.property('wagon.version')}"
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all,-fallthrough" << "-profile" << "compact1"
    }

    test {
        testLogging {
            showStandardStreams = false
            exceptionFormat = 'full'
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    if (project.hasProperty('signing.keyId')) {
        signing {
            sign configurations.archives
        }
    }

    apply from: "${rootProject.projectDir}/gradle/ext.gradle"
    apply from: "${rootProject.projectDir}/gradle/publish.gradle"
    apply from: "${rootProject.projectDir}/gradle/sonarqube.gradle"
}
